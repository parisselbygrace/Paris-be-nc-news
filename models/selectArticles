const db = require(`../db/connection`);
const {checkArticleExists, checkTopicExists} = require ('../db/utils/db.js')
const format = require ("pg-format")



exports.selectArticles = (
  topic,
  sort_by = "created_at",
  order = "DESC"
) => {
  const newValues = []
  order = order.toUpperCase();
  const validSortByValues = [
    "article_id",
    "title",
    "topic",
    "author",
    "created_at",
    "votes",
    "comment_count",
  ];

  if (!validSortByValues.includes(sort_by))
    throw { status: 400, msg: "Invalid sort_by query" }
  if (order !== "ASC" && order !== "DESC")
    throw { status: 400, msg: "Invalid order query" }


    let queryText = `
    SELECT articles.author, title, articles.article_id,
    topic, articles.created_at, articles.votes,
    COUNT(comments.body) AS comment_count
    FROM articles
    LEFT JOIN comments ON articles.article_id = comments.article_id` ;

let promises = [];
if (topic) {
  queryText += " WHERE topic = $1";
  newValues.push(topic)
  promises.push(checkTopicExists(topic))
}

queryText += `
    GROUP BY articles.author, title, articles.article_id,
             topic, articles.created_at, articles.votes
    `;

queryText += ` ORDER BY ${sort_by} ${order};`;


promises.unshift(db.query(queryText, newValues));

return Promise.all(promises).then((result) => {
  return result[0].rows;
});
}



    exports.selectArticleById = (article_id) => {
      return db
        .query(
          `
        SELECT articles.author, title, articles.article_id,
            topic, articles.created_at, articles.votes, articles.body,
            COUNT(comments.body) AS comment_count
        FROM articles
        LEFT JOIN comments ON articles.article_id = comments.article_id
        WHERE articles.article_id = $1
        GROUP BY articles.article_id;
        `,
          [article_id]
        )
        .then((result) => {
          if (result.rows.length === 0) {
            return Promise.reject({ status: 404, msg: "Id does not exisit" });
          }
          return result.rows[0];
        });
    };

    exports.selectArticleCommentsById = (article_id) => {
            return db.query(
              `SELECT * FROM comments WHERE article_id = $1 ORDER BY created_at DESC;`,
              [article_id]
            ).then((res) => {
            return res.rows}
            )}

    exports.addComment = (newComment, article_id) => {
        return checkArticleExists(article_id).then(() => {
        const addedValues = [newComment.body, article_id, newComment.username]
        return db.query(
            `
            INSERT INTO comments 
            (body, article_id, author)
            VALUES
            ($1, $2, $3)
            RETURNING *;
            `, 
            addedValues
        ).then ((res) => {
            return res.rows[0]
        })
    })
    }

    exports.patchedArticle = (votes, article_id) => {
      return checkArticleExists(article_id).then(() => {
      return db
        .query(
          `
        UPDATE articles
        SET votes = votes + $1
        WHERE article_id = $2
        RETURNING *;
      `,
          [votes.inc_votes, article_id]
        )
        .then((res) => {
          return res.rows[0];
        })
      })
    }